openapi: 3.0.3
info:
  title: SerVu Table Management API
  description: Table management endpoints for SerVu Backend
  version: 1.0.0

paths:
  /restaurants/{restaurantId}/tables:
    get:
      tags:
        - Tables
      summary: Get restaurant tables
      description: Get all tables for a specific restaurant
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Tables retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Table'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Restaurant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Tables
      summary: Create table
      description: Create a new table for a restaurant
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - number
                - seats
              properties:
                number:
                  type: integer
                  example: 1
                seats:
                  type: integer
                  minimum: 1
                  example: 4
                location:
                  type: string
                  example: main_dining
                description:
                  type: string
                  example: Window table with city view
      responses:
        '201':
          description: Table created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /restaurants/{restaurantId}/tables/{tableId}:
    get:
      tags:
        - Tables
      summary: Get table
      description: Get table details by ID
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: tableId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Table retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Table not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Tables
      summary: Update table
      description: Update table information
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: tableId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                number:
                  type: integer
                  example: 1
                seats:
                  type: integer
                  minimum: 1
                  example: 4
                location:
                  type: string
                  example: main_dining
                description:
                  type: string
                  example: Window table with city view
                status:
                  type: string
                  enum: [available, occupied, reserved, maintenance]
                  example: available
      responses:
        '200':
          description: Table updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Table not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Tables
      summary: Delete table
      description: Delete a table from the restaurant
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: tableId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Table deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Table not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /restaurants/{restaurantId}/tables/{tableId}/status:
    patch:
      tags:
        - Tables
      summary: Update table status
      description: Update only the status of a table
      parameters:
        - name: restaurantId
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: tableId
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [available, occupied, reserved, maintenance]
                  example: occupied
      responses:
        '200':
          description: Table status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Table'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          description: Table not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Table:
      type: object
      properties:
        id:
          type: integer
          description: Table ID
          example: 1
        number:
          type: integer
          description: Table number
          example: 1
        seats:
          type: integer
          description: Number of seats at the table
          example: 4
        status:
          type: string
          enum: [available, occupied, reserved, maintenance]
          description: Current table status
          example: available
        location:
          type: string
          description: Table location within the restaurant
          example: main_dining
        description:
          type: string
          description: Table description or notes
          example: Window table with city view
        restaurantId:
          type: integer
          description: ID of the restaurant this table belongs to
          example: 1
        createdAt:
          type: string
          format: date-time
          description: Table creation timestamp
          example: 2024-01-15T10:30:00Z
        updatedAt:
          type: string
          format: date-time
          description: Table last update timestamp
          example: 2024-01-20T14:45:00Z

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Invalid credentials
        code:
          type: string
          description: Error code
          example: VALIDATION_ERROR
        details:
          type: object
          description: Additional error details
          additionalProperties: true

  responses:
    UnauthorizedError:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Authentication required
            code: AUTH_REQUIRED

    ForbiddenError:
      description: Access forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error: Access forbidden
            code: ACCESS_FORBIDDEN

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from login endpoint

security:
  - bearerAuth: []

tags:
  - name: Tables
    description: Table management endpoints